/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package shakemon;

import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.json.MetricsModule;
import io.javalin.Javalin;
import io.javalin.plugin.json.JavalinJackson;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import shakemon.api.AdminEndpoints;
import shakemon.api.AppEndpoints;
import shakemon.pokemon.PokeAPI;
import shakemon.pokemon.PokemonDescriptions;
import shakemon.translation.Translate;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import static java.util.stream.Collectors.toList;

public class Main {

    private static final Logger LOG = LoggerFactory.getLogger(Main.class);

    final MetricRegistry metrics = new MetricRegistry();

    private final ShakemonConfig config;

    public Main(ShakemonConfig config) {
        this.config = config;
    }

    public static void main(String[] args) {
        var argList = Arrays.stream(args).map(s -> s.trim().toLowerCase()).collect(toList());
        if (argList.contains("print_default_config")) {
            System.out.println("# EMBEDDED config.properties file");
            System.out.println(Utils.resourceAsString("config.properties", Main.class));
            System.exit(0);
        }
        new Main(ShakemonConfig.load()).run();
    }

    public void run() {
        JavalinJackson.defaultObjectMapper().registerModule(metricsToJsonSerializationConfig());
        adminServer();
        appServer();
    }

    private void appServer() {
        var port = config.port();
        var app = Javalin.create().start(port);
        LOG.info("App listening on port: {}", port);
        new AppEndpoints(dependencies(), metrics).register(app);
    }

    private void adminServer() {
        var port = config.adminPort();
        var admin = Javalin.create().start(port);
        LOG.info("Admin Service listening on port: {}", port);
        new AdminEndpoints(metrics).register(admin);
    }

    @NotNull
    private MetricsModule metricsToJsonSerializationConfig() {
        var showSamples = true;
        return new MetricsModule(TimeUnit.MILLISECONDS, TimeUnit.MILLISECONDS, showSamples);
    }

    private TranslatePokemonDescription dependencies() {
        return new TranslatePokemonDescription(
                pokemonDescriptions(),
                Translate.Fake.prependingToDescription("Pretend it is Shakesperean: "));
    }

    @NotNull
    private PokemonDescriptions pokemonDescriptions() {
        return config.pokeApiUrl()
                .map((url) -> (PokemonDescriptions) new PokeAPI(url))
                .orElseGet(() -> PokemonDescriptions.Fake.alwaysReturning("best pokemon"));
    }

}
